// Import prompt-sync for user input in the terminal
import PromptSync from "prompt-sync";
const prompt = PromptSync({ sigint: true });

// Import mysql2/promise for async MySQL database operations
import mysql from "mysql2/promise";

// Import dotenv to load environment variables from .env file
import dotenv from "dotenv";
dotenv.config({ path: "../../.env" });

// In-memory data: Map of employee records, each value is an object (list of maps)
const table = new Map([
  [
    1,
    {
      "First Name": "John",
      "Last Name": "Johnson",
      Position: "Manager",
      "Separation date": "2016-12-31",
    },
  ],
  [
    2,
    {
      "First Name": "Tou",
      "Last Name": "Xiong",
      Position: "Software Engineer",
      "Separation date": "2016-10-05",
    },
  ],
  [
    3,
    {
      "First Name": "Michaela",
      "Last Name": "Michaelson",
      Position: "District Manager",
      "Separation date": "2015-12-19",
    },
  ],
  [
    4,
    {
      "First Name": "Jake",
      "Last Name": "Jacobson",
      Position: "Programmer",
      "Separation date": "",
    },
  ],
  [
    5,
    {
      "First Name": "Jacquelyn",
      "Last Name": "Jackson",
      Position: "DBA",
      "Separation date": "",
    },
  ],
  [
    6,
    {
      "First Name": "Sally",
      "Last Name": "Weber",
      Position: "Web Developer",
      "Separation date": "2015-12-18",
    },
  ],
]);

// The code below was generated by code completion and i'm not even sure how it works
// function sortby(value, data){
//     const sorted = new Map([...data.entries()].sort((a, b) => {
//         return a[1][value].localeCompare(b[1][value])
//     }))
//     return sorted
// }

// This function is used to perform sorting for the normal data generated with map
// It sorts the Map by the given term (e.g., "Last Name", "Position", "Separation date")
// and returns a new Map sorted by that field.
function sortby(term, data) {
  try {
    let array = [];
    for (let [key, value] of data) {
      array.push(value[term]);
    }
    array = array.sort();
    let newData = new Map([]);
    for (let key of array) {
      for (let [key2, value] of data) {
        if (value[term] == key) {
          newData.set(key2, value);
        }
      }
    }
    return newData;
  } catch (err) {
    console.log(err);
  }
}

// function to convert NULL to '' for display purposes
function convertNull(data) {
  data.forEach((element) => {
    if (element["Separation date"] == null) {
      element["Separation date"] = "";
    }
  });
  return data;
}

// function to sort the employees from the database
// It sorts the array of employee objects by the given term and returns a new Map.
async function sortbyDB(term, data) {
  try {
    let array = [];
    data.forEach((element) => {
      array.push(element[term]);
    });
    array = array.sort();
    let newData = new Map([]);
    for (let key of array) {
      data.forEach((element, index) => {
        if (element[term] == key) {
          newData.set(index + 1, element);
        }
      });
    }
    return newData;
  } catch (err) {
    console.log(err);
  }
}

// This function is used to restructure the data to the format we want for display
// It combines first and last name into a single "Name" field.
function restructure(data) {
  let newData = new Map([]);
  for (let [key, value] of data) {
    newData.set(key, {
      Name: value["First Name"] + " " + value["Last Name"],
      Position: value.Position,
      "Separation date": value["Separation date"],
    });
  }
  return newData;
}

// Function to print the employee data in a formatted table
function print(data) {
  console.log(
    "Name".padEnd(20, " ") +
      " | " +
      "Position".padEnd(25, " ") +
      " | " +
      "Separation Date".padEnd(20, " ")
  );
  console.log("-".repeat(20) + " | " + "-".repeat(25) + " | " + "-".repeat(20));
  for (let [key, value] of data) {
    console.log(
      value["Name"].padEnd(20, " ") +
        " | " +
        value.Position.padEnd(25, " ") +
        " | " +
        value["Separation date"].padEnd(20, " ")
    );
  }
}

// This is used to verify the sort term entered by the user
// Only allows "last name", "position", or "separation date"
function verifySortValue(value) {
  value = value.trim();
  return value === "Last Name" || value === "Position" || value === "Separation date"
}

// function to fetch the employees from the database
// Connects to MySQL, fetches employee records, and returns them as an array of objects
async function fetchEmployees() {
  try {
    const con = await mysql.createConnection({
      host: process.env.DB_HOST,
      port: process.env.DB_PORT,
      user: process.env.DB_USER,
      password: process.env.DB_PASS,
      database: process.env.DB_NAME,
    });
    let sql =
      "SELECT `First Name`, `Last Name`, Position, DATE_FORMAT(`Separation Date`, '%Y-%m-%d') AS `Separation date` FROM employees;";

    const [rows] = await con.execute(sql);

    await con.end();
    return rows;
  } catch (err) {
    console.error("Database error:", err.message);
  }
}

// main function
// Orchestrates fetching, sorting, restructuring, and printing employee data
async function main() {
  try {
    let employees_db = await fetchEmployees();
    while (true) {
      try {
        let value = prompt("Enter a value to sort by: ").trim();
        if (verifySortValue(value)) {
          console.log("");
          employees_db = convertNull(employees_db); // This is to remove the nulls from the date
          let data = await sortbyDB(value, employees_db); // or we use sortby() if it's not getting data from db
          data = restructure(data);
          print(data);
          console.log("");
          break;
        } else {
          console.log(`Invalid value\n Please enter a sort value of "Last Name", "Position", or "Separation date".`);
        }
      } catch (e) {
        console.log(e);
      }
    }
  } catch (e) {
    console.log(e);
  }
}

// start the program
main();